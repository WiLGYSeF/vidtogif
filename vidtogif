#!/bin/bash

IMG_FORMAT="img_%04d.jpg"

SCALE_WIDTH=480
TIME_SKIP=0
FRAME_RATE=0

OVERWRITE=0

usage() {
	cat <<EOF
Usage: vidtogif [options] FILE ...

  -h, --help         shows this help menu
  -o, --overwrite    overwrites output gifs, skips creating gifs otherwise
  -v, --verbose      verbose mode
  -w, --width [NUM]  set the output gif width (default 480)
EOF
}

options=$(getopt -n vidtogif -o hovw: --long help,overwrite,verbose,width: -- "$@")
eval set -- "$options"

ffmpeg_options=("-hide_banner" "-loglevel error")
verbose=0

while true; do
	case "$1" in
		-h | --help)
			usage ; exit 0 ;;
		-o | --overwrite)
			ffmpeg_options+=("-y")
			OVERWRITE=1
			shift ;;
		-v | --verbose)
			verbose=1
			shift ;;
		-w | --width)
			SCALE_WIDTH="$2"
			shift 2 ;;
		--) shift; break ;;
	esac
done

for fname in "$@"; do
	outfname="${fname}.gif"

	if [ $OVERWRITE -eq 0 ] && [ -f "$outfname" ]; then
		continue
	fi

	[ $verbose -eq 1 ] && echo "$fname"

	duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$fname")
	duration=${duration%.*}

	if [ $duration -lt 300 ]; then
		time_skip=15
		frame_rate=2
	elif [ $duration -lt 600 ]; then
		time_skip=15
		frame_rate=3
	elif [ $duration -lt 1200 ]; then
		time_skip=30
		frame_rate=4
	elif [ $duration -lt 1800 ]; then
		time_skip=30
		frame_rate=5
	elif [ $duration -lt 3600 ]; then
		time_skip=60
		frame_rate=6
	else
		time_skip=120
		frame_rate=8
	fi

	[ $TIME_SKIP -gt 0 ] && time_skip=$TIME_SKIP
	[ $FRAME_RATE -gt 0 ] && frame_rate=$FRAME_RATE

	tmpdir=$(mktemp -d)

	loop_num=$(($duration / $time_skip))
	[ $loop_num -eq 0 ] && ((loop_num++))

	[ $verbose -eq 1 ] && echo -n "  extracting frames..."
	for ((i = 0; i < $loop_num; i++)); do
		ip1=$(($i + 1))
		[ $verbose -eq 1 ] && echo -en "\r  extracting frame $ip1 / $loop_num ..."

		image_name=$(printf "$IMG_FORMAT" "$ip1")
		ffmpeg ${ffmpeg_options[@]} -ss "$(($i * $time_skip))" -i "$fname" -vf "scale=${SCALE_WIDTH}:-1" -frames:v 1 "$tmpdir"/"$image_name"
	done
	[ $verbose -eq 1 ] && echo ""

	[ $verbose -eq 1 ] && echo "  converting frames to gif..."
	ffmpeg ${ffmpeg_options[@]} -f image2 -framerate "$frame_rate" -i "$tmpdir"/"$IMG_FORMAT" "$outfname"

	rm -r "$tmpdir"
done
